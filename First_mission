import cv2 as cv
import pymurapi as mur

auv = mur.mur_init()

auv.set_motor_power(2, 15)
auv.set_motor_power(3, 15)

Red_min = (0, 20, 20)
Red_max = (15, 255, 255)
Yellow_min = (20, 50, 50)
Yellow_max = (50, 255, 255)
Green_min = (60, 20, 20)
Green_max = (80, 255, 255)

def find_buoy(min_color, max_color):
    # Подаётся оригинальное изображение в качестве параметра функции  и hsv пределы
    # Функция возвращает переменную X - координату x буя
    cap = auv.get_image_front()
    hsv_image = cv.cvtColor(cap, cv.COLOR_BGR2HSV)
    binar_image = cv.inRange(hsv_image, min_color, max_color)
    Color_contours, hierarchy = cv.findContours(binar_image, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)
    cv.imshow("binar_image", cap)
    color_list = []
    global X
    for contour in Color_contours:
        color_list.append([cv.contourArea(contour), contour])
        M = cv.moments(cv.contourArea)
        X = int(M["m10"] / M["m00"]) - 320
    color_list.sort()
    if color_list[0, 0] hierarchy > 300:
        Color_find_flag = 1
    if Color_find_flag = 1:
        auv.set_motor_power(0, 70 - X)
        auv.set_motor_power(1, 70 + X)
        if color_list[0, 0] == 0:
            Color_counter = 0
    cv.waitKey(0.1)
    return X


def to_the_buoy(Color_min, Color_max, Color_number, Right_motor_power):
    auv.set_motor_power(1, Right_motor_power)
    auv.set_motor_power(2, -30)
    Color_counter = Color_number
    Color_find_flag = 0
    while Color_counter == Color_number:
        find_buoy(Color_min, Color_max)


to_the_buoy(Red_min, Red_max, 1, 30)
to_the_buoy(Yellow_min, Yellow_max, 2, -30)
to_the_buoy(Green_min, Green_max, 3, -30)
