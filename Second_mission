import cv2 as cv
import pymurapi as mur
import time

auv = mur.mur_init()

auv.set_motor_power(2, 5)
auv.set_motor_power(3, 5)

Red_min = (0, 20, 20)
Red_max = (15, 255, 255)
Yellow_min = (20, 50, 50)
Yellow_max = (50, 255, 255)
Green_min = (60, 20, 20)
Green_max = (80, 255, 255)
Purple = (140, 255, 255)
X = 0
def find_buoy():
    # Подаётся оригинальное изображение в качестве параметра функции
    # Функция возвращает переменную X - координату x буя, если буя не найдено - возвращается False
    Max_contour = defind_buoy()
    if Max_contour:
        for contour in Max_contour:
            if abs(cv.contourArea(contour)) > 100:
                M = cv.moments(contour)
                try:
                    X = (int(M["m10"]/M["m00"]))
                except ZeroDivisionError:
                    pass
            #     auv.set_motor_power(0, 40 - X)
            #     auv.set_motor_power(1, 40 + X)
            #     Color_counter = 1
            # elif Color_counter == 1 or abs(cv.contourArea(contour)) > 5000:
            #     # Color_counter = 0
    cv.imshow("binar_image", cap)
    if len(color_list) > 0:
        try:
            color_list.sort()
            cv.drawContours(cap, color_list[0][1],-1,(255,0,0),1)
        except ValueError:
            pass
        return X
    else:
        return False

def keep_x(yaw:float, X, additional_fwd: float = 0, time_to_keep: float = 0) -> None:
    """Keeps yaw by X target value.
    Args:
        yaw (float): Yaw to keep.
        additional_fwd (float): Forward thrust speed.
    """
    global auv, yaw_reg
    def subkeep():
        err = X - yaw
        error = clamp(yaw_reg.compute(err), -100, 100)
        auv.set_motor_power(THRUSTER_LEFT, (additional_fwd - error) * THRUSTER_DIRECTION_LEFT)
        auv.set_motor_power(THRUSTER_RIGHT, (additional_fwd + error) * THRUSTER_DIRECTION_RIGHT)

    if time_to_keep == 0:
        return subkeep()
    timer = time.time() + time_to_keep
    while time.time() < timer:
        subkeep()
        time.sleep(0.01)
        frame = get_auv_image()
        show(frame, 1)

def defind_buoy():
    #Функция возвращщает максимальный контур и его цвет, если контура не найдено - в цвет записывается "No contour", а в контур - "Unknown"
    cap = auv.get_image_front()
    hsv_image = cv.cvtColor(cap, cv.COLOR_BGR2HSV)
    hsv_red = cv.inRange(hsv_image, Red_min, Red_max)
    hsv_yellow = cv.inRange(hsv_image, Yellow_min, Yellow_max)
    hsv_green = cv.inRange(hsv_image, Green_min, Green_max)
    Max_color = 0
    Red_contours, _ = cv.findContours(hsv_red, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)
    Yellow_contours, _ = cv.findContours(hsv_yellow, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)
    Green_contours, _ = cv.findContours(hsv_green, cv.RETR_EXTERNAL, cv.CHAIN_APPROX_NONE)

    red_list = []
    for contour in Red_contours:
        red_list.append([cv.contourArea(contour), contour])

    yellow_list = []
    for contour in Yellow_contours:
        yellow_list.append([cv.contourArea(contour), contour])

    green_list = []
    for contour in Green_contours:
        green_list.append([cv.contourArea(contour), contour])

    red_list.sort(reverse=True)
    yellow_list.sort(reverse=True)
    green_list.sort(reverse=True)
    if len(red_list) > 0:
        Max_red_contour = red_list[0][1]
        Max_red_contour_size = red_list [0][0]
    else:
        Max_red_contour = 0
        Max_red_contour_size = 0
    if len(yellow_list) > 0:
        Max_yellow_contour = yellow_list[0][1]
        Max_yellow_contour_size = yellow_list[0][0]
    else:
        Max_yellow_contour = 0
        Max_yellow_contour_size = 0
    if len(green_list) > 0:
        Max_green_contour = green_list[0][1]
        Max_green_contour_size = green_list[0][0]
    else:
        Max_green_contour = 0
        Max_green_contour_size = 0
    Max_contour = 0

    if Max_red_contour > Max_yellow_contour and Max_red_contour > Max_green_contour:
        Max_contour = Max_red_contour_size
        Max_color = "Red"
    elif Max_yellow_contour > Max_red_contour and Max_yellow_contour > Max_green_contour:
        Max_contour = Max_yellow_contour_size
        Max_color = "Yellow"
    else:
        Max_contour = Max_green_contour_size
        Max_color = "Green"
    if Max_contour < 100:
        Max_contour = "Unknown"
        Max_color = "No contour"
    return Max_contour, Max_color

def to_the_buoy():
    #Функция принимает hsv пределы в качестве аргументов
    #Функция возвращает площадь конура
    x = find_buoy()
    if x:
        keep_x(x,320,30,5)
    cv.waitKey(1)
while True:
    to_the_buoy()
